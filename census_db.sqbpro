<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/fox/Python/SQL/SQL Lite/Education_and_Census_Data/census_db.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3379"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,11:maincensus_data"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="census_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="65"/><column index="2" value="82"/><column index="3" value="71"/><column index="4" value="181"/><column index="5" value="84"/><column index="6" value="216"/><column index="7" value="211"/><column index="8" value="153"/><column index="9" value="147"/><column index="10" value="162"/><column index="11" value="143"/><column index="12" value="145"/><column index="13" value="73"/><column index="14" value="70"/><column index="15" value="71"/><column index="16" value="89"/><column index="17" value="108"/><column index="18" value="119"/><column index="19" value="98"/><column index="20" value="102"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="census_data - census_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="65"/><column index="2" value="82"/><column index="3" value="71"/><column index="4" value="181"/><column index="5" value="84"/><column index="6" value="216"/><column index="7" value="211"/><column index="8" value="153"/><column index="9" value="147"/><column index="10" value="162"/><column index="11" value="143"/><column index="12" value="145"/><column index="13" value="73"/><column index="14" value="70"/><column index="15" value="71"/><column index="16" value="89"/><column index="17" value="108"/><column index="18" value="119"/><column index="19" value="98"/><column index="20" value="102"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="public_hs_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="95"/><column index="2" value="300"/><column index="3" value="205"/><column index="4" value="127"/><column index="5" value="82"/><column index="6" value="65"/><column index="7" value="84"/><column index="8" value="140"/><column index="9" value="156"/><column index="10" value="73"/><column index="11" value="70"/><column index="12" value="71"/><column index="13" value="89"/><column index="14" value="108"/><column index="15" value="119"/><column index="16" value="98"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="public_hs_data - public_hs_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="95"/><column index="2" value="300"/><column index="3" value="205"/><column index="4" value="127"/><column index="5" value="82"/><column index="6" value="65"/><column index="7" value="84"/><column index="8" value="140"/><column index="9" value="156"/><column index="10" value="73"/><column index="11" value="70"/><column index="12" value="71"/><column index="13" value="89"/><column index="14" value="108"/><column index="15" value="119"/><column index="16" value="98"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="ps_zip_code">SELECT zip_code, COUNT(*) AS Quantity
FROM public_hs_data
WHERE school_name LIKE '% public%'
GROUP BY zip_code
ORDER BY 2 DESC;</sql><sql name="ps_state">SELECT state_code AS State, COUNT(*) AS Quantity
FROM public_hs_data
WHERE school_name LIKE '% public%'
GROUP BY state_code
ORDER BY 2 DESC;</sql><sql name="ps_locale_text">SELECT *,
	CASE
		WHEN locale_code = 11 THEN 'Large City'
		WHEN locale_code = 12 THEN 'Midsize City'
		WHEN locale_code = 13 THEN 'Small City'
		WHEN locale_code = 21 THEN 'Large Suburb'
		WHEN locale_code = 22 THEN 'Midsize Suburb'
		WHEN locale_code = 23 THEN 'Small Suburb'
		WHEN locale_code = 31 THEN 'Fringe Town'
		WHEN locale_code = 32 THEN 'Distant Town'
		WHEN locale_code = 33 THEN 'Remote Town'
		WHEN locale_code = 41 THEN 'Fringe Rural'
		WHEN locale_code = 42 THEN 'Distant Rural'
		ELSE 'Remote Rural'
	END AS locale_text
FROM public_hs_data;</sql><sql name="median_household_income_by_state">SELECT MIN(median_household_income) AS 'Min Median Income', 
MAX(median_household_income) AS 'Max Median Income', 
ROUND(AVG(median_household_income),2) AS 'Avg Median Income', state_code AS 'State Code'
FROM census_data
GROUP BY state_code
ORDER BY 3 DESC;</sql><sql name="median_household_income_by_nation">UPDATE census_data 
SET median_household_income = NULL
WHERE median_household_income = 'NULL';

SELECT MIN(median_household_income) AS 'Min Median Income', 
MAX(median_household_income) AS 'Max Median Income', 
ROUND(AVG(median_household_income),2) AS 'Avg Median Income'
FROM census_data;</sql><sql name="income VS school performance">SELECT
	CASE
		WHEN median_household_income &gt; 100000 THEN 'Very high income'
		WHEN median_household_income &gt; 50000 AND median_household_income &lt; 100000 THEN 'High income'
		WHEN median_household_income &gt; 25000 AND median_household_income &lt; 50000 THEN 'Average income'
		ELSE 'Low income'
	END AS 'Income Ranges',
ROUND(AVG(pct_proficient_math),2) AS 'Avg Math Prof', ROUND(AVG(pct_proficient_reading),2) AS 'Avg Read Prof'
FROM (SELECT *
FROM census_data
JOIN public_hs_data
	ON census_data.zip_code = public_hs_data.zip_code
WHERE pct_proficient_math NOT NULL)
GROUP BY 1
ORDER BY 2 DESC;</sql><sql name="Math vs. Reading by State">UPDATE public_hs_data 
SET pct_proficient_math = NULL
WHERE pct_proficient_math = 'NULL';
UPDATE public_hs_data 
SET pct_proficient_reading = NULL
WHERE pct_proficient_reading = 'NULL';

SELECT ROUND(AVG(pct_proficient_math),2) AS 'Avg Math Prof', ROUND(AVG(pct_proficient_reading),2) AS 'Avg Read Prof', state_code,
CASE
	WHEN AVG(pct_proficient_math) &gt; AVG(pct_proficient_reading) THEN 'Better in Math'
	WHEN AVG(pct_proficient_math) &lt; AVG(pct_proficient_reading) THEN 'Better in Reading'
END AS 'Math vs. Reading'
FROM (SELECT *
FROM census_data
JOIN public_hs_data
	ON census_data.zip_code = public_hs_data.zip_code
WHERE pct_proficient_math NOT NULL)
GROUP BY 3;
</sql><sql name="state vs. zip in aggr.stat">WITH df AS(
SELECT
ROUND(AVG(pct_proficient_math),2) AS state_avg_math,
ROUND(AVG(pct_proficient_reading),2) AS state_avg_read,
ROUND(MIN(pct_proficient_math),2) AS state_min_math,
ROUND(MIN(pct_proficient_reading),2) AS state_min_read,
ROUND(MAX(pct_proficient_math),2) AS state_max_math,
ROUND(MAX(pct_proficient_reading),2) AS state_max_read,
state_code
FROM public_hs_data
WHERE pct_proficient_math NOT NULL
GROUP BY state_code
)
SELECT public_hs_data.zip_code, df.state_code, df.state_avg_math, df.state_avg_read, df.state_min_math, df.state_min_read, df.state_max_math, df.state_max_read, 
ROUND(AVG(pct_proficient_math),2) AS zip_avg_math,
ROUND(AVG(pct_proficient_reading),2) AS zip_avg_read,
ROUND(MIN(pct_proficient_math),2) AS zip_min_math,
ROUND(MIN(pct_proficient_reading),2) AS zip_min_read,
ROUND(MAX(pct_proficient_math),2) AS zip_max_math,
ROUND(MAX(pct_proficient_reading),2) AS zip_max_read
FROM public_hs_data
JOIN df
ON public_hs_data.state_code = df.state_code
GROUP BY 1
ORDER BY df.state_code;


</sql><current_tab id="7"/></tab_sql></sqlb_project>
